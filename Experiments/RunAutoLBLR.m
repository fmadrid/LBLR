%% EXPERIMENT PARAMETERS
DATASET       = '../Datasets/bEHAVIORS/3DAccelerationData3_1.mat';  
OUTPUT_FOLDER = '3DAcceleration'; % Outputs all results to this directory
SAVEPLOTS     = false;     % Save the plots generated by AutoLBLR to file?
    
%% AUTOLBLR PARAMETERS

MODEL_LENGTH = 100;      % Size of the largest motif
BITS         = 4;       % Discretization cardinality (Suggested Values: 4, 6, 8)
BLIND        = false;   % Indicates if the solution vector is hidden to AutoLBLR

% No need to change these but provided as an example
%EXCLUSION_RANGE = LENGTH/4;        % 
%MAX_ITERATIONS  = 100;             % By definition, iteration count is capped at length(DATASET) / LENGTH.

    
%% INPUT VALIDATION
errormsg = sprintf('The supplied dataset [%s] does not exist.', DATASET);
assert(exist(DATASET, 'file') == 2, errormsg);

Data = load(DATASET);
errormsg = 'Imported dataset does not contain a TimeSeries attribute.\n';
assert(isfield(Data, 'TimeSeries'), errormsg);

%errormsg = sprintf('[%s] directory already exists.\n', OUTPUT_FOLDER);
%assert(exist(OUTPUT_FOLDER, 'dir') ~= 7, errormsg);

%% INITIALIZATION
addpath('../SourceCode');
mkdir(pwd, OUTPUT_FOLDER);

fileID = fopen([OUTPUT_FOLDER '/Experiment Results.txt'], 'w');

%% INITIALIZE LOG FILE
fprintf(fileID, '==================================================\n');
fprintf(fileID, ' %s\n', 'AutoLBLR Experiment');
fprintf(fileID, '==================================================\n');
fprintf(fileID, 'Experiment Parameters\n');
fprintf(fileID, '\t%-7s: %s\n', 'Dataset', DATASET);
fprintf(fileID, '\n');

fprintf(fileID, 'AutoLBLR Parameters\n');
fprintf(fileID, '\t%-7s: %d\n', 'Length', MODEL_LENGTH);
fprintf(fileID, '\t%-7s: %d\n', 'Bits',   BITS);
fprintf(fileID, '\t%-7s: %d\n', 'Blind',  BLIND);
fprintf(fileID, '\n');

%% RUN AUTOLBLR
tic
[Labels, PlotHandles, Completion] = AutoLBLR(Data.TimeSeries, MODEL_LENGTH, Data.Solution, 'Bits', BITS, 'Blind', BLIND, 'Debug', true);
ElapsedTimeAutoLBLR = toc;

%% OUTPUT RESULTS
save([OUTPUT_FOLDER '/Labels.mat'], 'Labels');
save([OUTPUT_FOLDER '/Completion.mat'], 'Completion');
copyfile('AutoLBLR - Logfile.txt', OUTPUT_FOLDER);
fprintf(fileID, '==================================================\n');
fprintf(fileID, ' %s\n', 'Results');
fprintf(fileID, '==================================================\n');
fprintf(fileID, '%-17s: %d\n',            'Iterations',       numel(Completion));
fprintf(fileID, '%-17s: %0.2f seconds\n', 'Elapsed Time',     ElapsedTimeAutoLBLR);
fprintf(fileID, '%-17s: %0.2f\n',         'Classified',       sum(Labels ~= 0) / numel(Labels) * 100);
fprintf(fileID, '%-17s: %0.2f\n',         'Overall Accuracy', sum(Labels == Data.Solution) / numel(Data.Solution) * 100);
fprintf(fileID, '%-17s: %0.2f\n',         'Default Accuracy', sum(mode(Data.Solution) == Data.Solution) / numel(Data.Solution) * 100);

%% GENERATE PLOTS
if SAVEPLOTS
  mkdir(pwd, [OUTPUT_FOLDER '/AutoLBLR']);
  for i = 1 : numel(PlotHandles)
    str = [OutputFolder '/Plots/AutoLBLR/' get(PlotHandles(i), 'name') '.fig'];
    set(PlotHandles(i), 'visible', 'on');
    saveas(PlotHandles(i), str);
    close(PlotHandles(i));
  end
end

[~, Filename] = fileparts(DATASET);
PlotCompletion(Data.TimeSeries, MODEL_LENGTH, Completion, 'Filename', Filename);

%% CLEANUP

clear DATASET OUTPUT_FOLDER SAVEPLOTS MODEL_LENGTH BITS BLIND errormsg ElapsedtimeAutoLBLR Completion Data ElapsedTimeAutoLBLR fileID Labels PlotHandles